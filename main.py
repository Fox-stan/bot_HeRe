import os
import threading
import asyncio
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ChatJoinRequestHandler,
)
from flask import Flask
from aiohttp import ClientSession, TCPConnector

from peewee import SqliteDatabase, Model, BigIntegerField, TextField

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

# --- DATABASE SETUP ---

db = SqliteDatabase('db.sqlite3')


class User(Model):
    tg_id = BigIntegerField(unique=True)
    sub_id = TextField()

    def __repr__(self):
        return f"{self.tg_id} - {self.sub_id}"

    class Meta:
        database = db


class DBManager:

    @classmethod
    def initialize(cls):
        db.connect()
        db.create_tables([User], safe=True)
        db.close()

    @classmethod
    def add_user(cls, tg_id, sub_id) -> bool:
        try:
            user, created = User.get_or_create(tg_id=tg_id, defaults={'sub_id': sub_id})
            if not created:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–∏–º sub_id (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è)
                if user.sub_id != sub_id:
                    user.sub_id = sub_id
                    user.save()
                print(f'User {tg_id} already in db')
                return False
            else:
                print(f'User {tg_id} added to database')
                return True
        except Exception as e:
            print(f'Error in add_user: {e}')
            return False

    @classmethod
    def get_sub_id(cls, tg_id):
        try:
            user = User.get(User.tg_id == tg_id)
            return user.sub_id
        except User.DoesNotExist:
            return None


# --- FLASK APP ---

flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"


def run_flask():
    flask_app.run(host="0.0.0.0", port=8080)


# --- YOUR ORIGINAL CONSTANTS AND FUNCTIONS ---

CHANNELS = [
    -1002451226832,
    -1002599197728,
    -1002618219543,
    -1002669832980,
    -1002648070121,
    -1002688260177,
    -1002589814978,
    -1002566204798,
    -1002592832472,
    -1002640991456,
    -1002428903920,
    -1002644410680,
    -1002269277900,
]

POSTBACK_URL = "https://tele-check.lol/7fa6ffd/postback"

LINK_PODTV = "https://t.me/+mY3hHEOcA1hjNjll"
LINK_MUZH = "https://t.me/+78CQ-szbfq9iNjVl"
LINK_JENA = "https://t.me/+2O-E6-ujo05iMzJl"
PARTNER1 = "https://t.me/+yQnB4LWBmEw3Njdl"
PARTNER2 = "https://t.me/+po9rWTrL1dAzMTc1"
PARTNER3 = "https://t.me/+tVmHFavEeRw5YTBl"
REGION_LINKS = {
    'east': "https://t.me/+cmc5r38zfi5jYWU1",
    'central': "https://t.me/+j2qKmGqgaV81NjZl",
    'west': "https://t.me/+RV6bxd_J8S5iMDBl",
    'south': "https://t.me/+bZvcyN4hMa8xODI1",
    'north': "https://t.me/+b6O1CD4LeHQzYjFl",
}

(
    STEP_VACANCY, STEP_OTHER_TEXT, STEP_CONFIRM,
    STEP_GENDER, STEP_REGION, STEP_AGE, STEP_ABOUT, STEP_PARTNER
) = range(8)

user_data = {}


async def send_start_postback(sub_id):
    try:
        async with ClientSession(connector=TCPConnector(ssl=False)) as session:
            await session.get(f"{POSTBACK_URL}?subid={sub_id}&status=start_bot&from=bot")
    except Exception as e:
        print(e)


async def send_subscribe_postback(index, sub_id):
    try:
        async with ClientSession(connector=TCPConnector(ssl=False)) as session:
            await session.get(f"{POSTBACK_URL}?subid={sub_id}&status=subscribe{index+1}&from=bot")
    except Exception as e:
        print(e)


# --- HANDLERS ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_user.id
    subid = context.args[0] if context.args else "unknown"
    DBManager.add_user(chat_id, subid)
    await send_start_postback(subid)

    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ ‚Äú–ì–∞—Ä—è—á–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ—è—Ö –£–∫—Ä–∞—ó–Ω–∞‚Äù!\n"
        "–ù–∞ –∑–∞—Ä–∞–∑ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏:"
    )

    jobs = [
        ("–ö—É—Ä'—î—Ä", "v_kuryer", "40‚ÄØ000 –≥—Ä–Ω", "–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø—ñ—à–∫–∏, –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ñ –∞–±–æ –∞–≤—Ç–æ.\n‚úÖ –î–æ—Å–≤—ñ–¥ –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π\n‚úÖ –í–∏–¥–∞—î–º–æ —Å–∞–º–æ–∫–∞—Ç\n‚úÖ –í—ñ–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫"),
        ("–ü—Ä–æ–¥–∞–≤–µ—Ü—å", "v_prodavets", "45‚ÄØ000 –≥—Ä–Ω","–†–æ–±–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ: –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ–∫—É–ø—Ü—è–º, –≤–∏–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä—É.\n‚úÖ –û–ø–ª–∞—á—É–≤–∞–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞‚úÖ –í–∏–¥–∞—î–º–æ —Å–∞–º–æ–∫–∞—Ç\n‚úÖ –í—ñ–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫"),
        ("–í–∞–Ω—Ç–∞–∂–Ω–∏–∫", "v_gruzchik", "43‚ÄØ000 –≥—Ä–Ω", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –π —Ä–æ–∑–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ/—É –º–∞–≥–∞–∑–∏–Ω—ñ.\n‚úÖ –§—ñ–∑–∏—á–Ω–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å‚úÖ –î–æ—Å–≤—ñ–¥ –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π\n‚úÖ –ü—É–Ω–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å"),
        ("–ö–∞—Å–∏—Ä", "v_kassir", "42‚ÄØ000 –≥—Ä–Ω", "–†–æ–±–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ: –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ–∫—É–ø—Ü—è–º, –≤–∏–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä—É.\n‚úÖ –í—ñ–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫‚úÖ –î–æ—Å–≤—ñ–¥ –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π\n‚úÖ –í—ñ–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫"),
    ]
    for title, data, salary, details in jobs:
        await context.bot.send_message(
            chat_id,
            f"üî• {title} ‚Äî {salary}\n{details}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û–±—Ä–∞—Ç–∏", callback_data=data)]
            ])
        )

    await context.bot.send_message(
        chat_id,
        "–ê–±–æ –∑–∞–ª–∏—à –∑–∞—è–≤–∫—É –Ω–∞ —ñ–Ω—à—É –≤–∞–∫–∞–Ω—Å—ñ—é",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∏–≤–∏—Ç–∏—Å—å —â–µ 26 –≤–∞–∫–∞–Ω—Å—ñ–π", callback_data="other")]
        ])
    )
    return STEP_VACANCY


async def handle_vacancy_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    chat_id = query.from_user.id
    user_data[chat_id] = {"chosen_vacancy": query.data}

    await context.bot.send_photo(
        chat_id=chat_id,
        photo=open("2.jpeg", "rb"),
        caption="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —â–æ –≤–∏ –Ω–µ –±–æ—Ç, —â–æ–± –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –≥–∞—Ä—è—á–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏!", url=LINK_PODTV)]
        ])
    )

    await asyncio.sleep(3)
    await context.bot.send_photo(
        chat_id=chat_id,
        photo=open("3.jpeg", "rb"),
        caption="–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ–∫", url=LINK_MUZH)],
            [InlineKeyboardButton("–ñ—ñ–Ω–∫–∞", url=LINK_JENA)]
        ])
    )
    await asyncio.sleep(3)
    await context.bot.send_photo(
        chat_id=chat_id,
        photo=open("4.jpeg", "rb"),
        caption="–ó —è–∫–æ–≥–æ –≤–∏ —Ä–µ–≥—ñ–æ–Ω—É?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üá∫üá¶ –°—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", url=REGION_LINKS['east'])],
            [InlineKeyboardButton("üá∫üá¶ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", url=REGION_LINKS['central'])],
            [InlineKeyboardButton("üá∫üá¶ –ó–∞—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", url=REGION_LINKS['west'])],
            [InlineKeyboardButton("üá∫üá¶ –ü—ñ–≤–¥–µ–Ω–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", url=REGION_LINKS['south'])],
            [InlineKeyboardButton("üá∫üá¶ –ü—ñ–≤–Ω—ñ—á–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", url=REGION_LINKS['north'])],
        ])
    )
    await asyncio.sleep(3)
    await context.bot.send_message(chat_id, "–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?")
    return STEP_AGE


async def handle_other_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_user.id
    user_data[chat_id] = {"other_vacancy_text": update.message.text}
    return await handle_vacancy_choice(update, context)


async def handle_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_user.id
    user_data[chat_id]['age'] = update.message.text
    await update.message.reply_text("–†–æ–∑–∫–∞–∂—ñ—Ç—å —Ç—Ä–æ—Ö–∏ –ø—Ä–æ —Å–µ–±–µ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î —Ä–µ–∑—é–º–µ!")
    return STEP_ABOUT


async def handle_about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_user.id
    user_data[chat_id]['about'] = update.message.text

    await context.bot.send_photo(
        chat_id=chat_id,
        photo=open("5.jpeg", "rb"),
        caption="–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤, —â–æ–± –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —à–∞–Ω—Å–∏:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üü§ –í–µ–∫—Ç–æ—Ä | –£–∫—Ä–∞—ó–Ω–∞", url=PARTNER1)],
            [InlineKeyboardButton("–§–û–ö–£–° UA", url=PARTNER2)],
            [InlineKeyboardButton("üö® –ü–æ–¥—ñ—ó LIVE", url=PARTNER3)],
            [InlineKeyboardButton("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", callback_data='send_anyway')],
        ])
    )
    return STEP_PARTNER


async def handle_partner(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–î—è–∫—É—î–º–æ! –í–∞—à–µ —Ä–µ–∑—é–º–µ –≤–∂–µ —É –Ω–∞—Å. –ü—Ä–æ—Ç—è–≥–æ–º 3-—Ö –¥–Ω—ñ–≤ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –Ω–∞—à —Ä–µ–∫—Ä—É—Ç–µ—Ä."
    )
    return ConversationHandler.END


async def join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.chat_join_request.chat.id
        if chat_id in CHANNELS:
            idx = CHANNELS.index(chat_id)
            user_id = update.chat_join_request.from_user.id
            subid = DBManager.get_sub_id(user_id)
            await send_subscribe_postback(idx, subid)
    except Exception as e:
        print(e)


# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---

async def db_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_user.id
    test_sub_id = "test_subid123"
    status = DBManager.add_user(chat_id, test_sub_id)
    found = DBManager.get_sub_id(chat_id)
    await update.message.reply_text(f"‚úÖ DB Test\n–î–æ–¥–∞–Ω–æ: {status}\n–ó–Ω–∞–π–¥–µ–Ω–æ sub_id: {found}")


async def get_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    db_path = "db.sqlite3"
    if os.path.exists(db_path):
        await update.message.reply_document(open(db_path, "rb"))
    else:
        await update.message.reply_text("–§–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


# --- MAIN ---

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    DBManager.initialize()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask, daemon=True).start()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STEP_VACANCY: [CallbackQueryHandler(handle_vacancy_choice)],
            STEP_OTHER_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_other_text)],
            STEP_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_age)],
            STEP_ABOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_about)],
            STEP_PARTNER: [CallbackQueryHandler(handle_partner)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("dbtest", db_test))
    app.add_handler(CommandHandler("getdb", get_db))
    app.add_handler(ChatJoinRequestHandler(join_request))
    app.run_polling()


if __name__ == "__main__":
    main()
