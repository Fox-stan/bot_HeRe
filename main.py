import os
import threading
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
from flask import Flask

BOT_TOKEN = os.getenv("BOT_TOKEN")

flask_app = Flask(__name__)
@flask_app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

def run_flask():
    flask_app.run(host="0.0.0.0", port=8080)

(
    STEP1, STEP2, STEP3, STEP4, STEP5, STEP6,
    STEP7, STEP8, STEP9, STEP10, STEP11, STEP12, STEP13
) = range(13)

# –í—Å—Ç–∞–≤ —Å–≤–æ—ó –ø–æ—Å–∏–ª–∞–Ω–Ω—è!
LINK_KURYER = "https://t.me/YOUR_CHANNEL1"
LINK_PRODAVEC = "https://t.me/YOUR_CHANNEL2"
LINK_GRUZCHIK = "https://t.me/YOUR_CHANNEL3"
LINK_KASSIR = "https://t.me/YOUR_CHANNEL4"
LINK_PODTV = "https://t.me/YOUR_CHANNEL5"
LINK_MUZH = "https://t.me/YOUR_CHANNEL6"
LINK_JENA = "https://t.me/YOUR_CHANNEL7"
PARTNER1 = "https://t.me/YOUR_PARTNER1"
PARTNER2 = "https://t.me/YOUR_PARTNER2"
PARTNER3 = "https://t.me/YOUR_PARTNER3"

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    chat_id = user.id
    user_data[chat_id] = {}

    text = (
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ ‚Äú–ì–∞—Ä—è—á–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ—è—Ö –£–∫—Ä–∞—ó–Ω–∞‚Äù!\n"
        "–ú–∏ –ø—Ä–∞—Ü—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–º–∏ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—è–º–∏ —Ç–∞ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞–º–∏ ‚Äî —Ç–æ–º—É –Ω–∞—à—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –∑–∞–≤–∂–¥–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –π –Ω–∞–¥—ñ–π–Ω—ñ.\n"
        "–ù–∞ –∑–∞—Ä–∞–∑ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏ –Ω–∞ —Ç–∞–∫—ñ –ø–æ–∑–∏—Ü—ñ—ó —É 25 –º—ñ—Å—Ç–∞—Ö –£–∫—Ä–∞—ó–Ω–∏:"
    )
    await update.message.reply_text(text)
    await context.bot.send_message(chat_id, "–¢–µ—Ä–º—ñ–Ω–æ–≤–æ —à—É–∫–∞—î–º–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤:")

    keyboard = [
        [InlineKeyboardButton("üî• –ö—É—Ä'—î—Ä ‚Äî 40‚ÄØ000 –≥—Ä–Ω", callback_data='kur')],
        [InlineKeyboardButton("üî• –ü—Ä–æ–¥–∞–≤–µ—Ü—å ‚Äî 45‚ÄØ000 –≥—Ä–Ω", callback_data='prod')],
        [InlineKeyboardButton("üî• –í–∞–Ω—Ç–∞–∂–Ω–∏–∫ ‚Äî 43‚ÄØ000 –≥—Ä–Ω", callback_data='gruz')],
        [InlineKeyboardButton("üî• –ö–∞—Å–∏—Ä ‚Äî 42‚ÄØ000 –≥—Ä–Ω", callback_data='kas')],
        [InlineKeyboardButton("–î–∏–≤–∏—Ç–∏—Å—å —â–µ 26 –≤–∞–∫–∞–Ω—Å—ñ–π", callback_data='other')]
    ]
    await context.bot.send_message(
        chat_id,
        "–û–±–µ—Ä—ñ—Ç—å –≤–∞–∫–∞–Ω—Å—ñ—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return STEP1

async def vacancy_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    chat_id = query.from_user.id
    vacancy_map = {
        'kur': ("üî• –ö—É—Ä'—î—Ä ‚Äî 40‚ÄØ000 –≥—Ä–Ω\n–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø—ñ—à–∫–∏, –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ñ –∞–±–æ –∞–≤—Ç–æ.\n"
                "‚úÖ –î–æ—Å–≤—ñ–¥ –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π\n‚úÖ –í–∏–¥–∞—î–º–æ —Å–∞–º–æ–∫–∞—Ç\n‚úÖ –í—ñ–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫", LINK_KURYER),
        'prod': ("üî• –ü—Ä–æ–¥–∞–≤–µ—Ü—å ‚Äî 45‚ÄØ000 –≥—Ä–Ω\n–†–æ–±–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ: –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ–∫—É–ø—Ü—è–º, –≤–∏–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä—É.\n"
                 "‚úÖ –û–ø–ª–∞—á—É–≤–∞–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞\n‚úÖ –í–∏–¥–∞—î–º–æ —Å–∞–º–æ–∫–∞—Ç\n‚úÖ –í—ñ–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫", LINK_PRODAVEC),
        'gruz': ("üî• –í–∞–Ω—Ç–∞–∂–Ω–∏–∫ ‚Äî 43‚ÄØ000 –≥—Ä–Ω\n–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –π —Ä–æ–∑–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ/—É –º–∞–≥–∞–∑–∏–Ω—ñ.\n"
                 "‚úÖ –§—ñ–∑–∏—á–Ω–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å\n‚úÖ –î–æ—Å–≤—ñ–¥ –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π\n‚úÖ –ü—É–Ω–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å", LINK_GRUZCHIK),
        'kas': ("üî• –ö–∞—Å–∏—Ä ‚Äî 42‚ÄØ000 –≥—Ä–Ω\n–†–æ–±–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ: –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ–∫—É–ø—Ü—è–º, –≤–∏–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä—É.\n"
                "‚úÖ –û–ø–ª–∞—á—É–≤–∞–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞\n‚úÖ –í–∏–¥–∞—î–º–æ —Å–∞–º–æ–∫–∞—Ç\n‚úÖ –í—ñ–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫", LINK_KASSIR),
        'other': ("–ê–±–æ –∑–∞–ª–∏—à –∑–∞—è–≤–∫—É –Ω–∞ —ñ–Ω—à—É –≤–∞–∫–∞–Ω—Å—ñ—é", None)
    }
    vacancy, link = vacancy_map.get(query.data, ("", None))
    user_data[chat_id]['vacancy'] = query.data

    if link:
        await query.message.reply_text(vacancy, reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–û–±—Ä–∞—Ç–∏", url=link)]
        ]))
    else:
        await query.message.reply_text(vacancy)

    # 8 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ
    with open("2.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —â–æ –≤–∏ –Ω–µ –±–æ—Ç, —â–æ–± –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –≥–∞—Ä—è—á–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏!", url=LINK_PODTV)]
            ])
        )

    await context.bot.send_message(
        chat_id,
        "–ù–∞–ø–∏—à—ñ—Ç—å, —è–∫–∞ –≤–∞–∫–∞–Ω—Å—ñ—è –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å!",
        reply_markup=ReplyKeyboardRemove()
    )
    return STEP2

async def vacancy_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_user.id
    user_data[chat_id]['vacancy_text'] = update.message.text

    # 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ
    with open("3.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ–∫", url=LINK_MUZH)],
                [InlineKeyboardButton("–ñ—ñ–Ω–∫–∞", url=LINK_JENA)],
            ])
        )
    return STEP3

async def gender_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_user.id
    # 11 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ
    with open("4.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–ó —è–∫–æ–≥–æ –≤–∏ —Ä–µ–≥—ñ–æ–Ω—É?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üá∫üá¶ –°—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", callback_data='region_east')],
                [InlineKeyboardButton("üá∫üá¶ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", callback_data='region_central')],
                [InlineKeyboardButton("üá∫üá¶ –ó–∞—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", callback_data='region_west')],
                [InlineKeyboardButton("üá∫üá¶ –ü—ñ–≤–¥–µ–Ω–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", callback_data='region_south')],
                [InlineKeyboardButton("üá∫üá¶ –ü—ñ–≤–Ω—ñ—á–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", callback_data='region_north')],
            ])
        )
    return STEP4

async def region_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    chat_id = query.from_user.id
    region_map = {
        'region_east': "–°—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞",
        'region_central': "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞",
        'region_west': "–ó–∞—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞",
        'region_south': "–ü—ñ–≤–¥–µ–Ω–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞",
        'region_north': "–ü—ñ–≤–Ω—ñ—á–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞",
    }
    region = region_map.get(query.data)
    user_data[chat_id]['region'] = region

    # 12 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ
    with open("1.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?"
        )
    return STEP5

async def age_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_user.id
    user_data[chat_id]['age'] = update.message.text
    await update.message.reply_text("–†–æ–∑–∫–∞–∂—ñ—Ç—å —Ç—Ä–æ—Ö–∏ –ø—Ä–æ —Å–µ–±–µ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î —Ä–µ–∑—é–º–µ!")
    return STEP6

async def about_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_user.id
    user_data[chat_id]['about'] = update.message.text

    # 14 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ
    with open("5.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–©–æ–± –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —à–∞–Ω—Å–∏ –∑–Ω–∞–π—Ç–∏ —Ä–æ–±–æ—Ç—É —Ç–∞ –≤–∏–¥—ñ–ª–∏—Ç–∏—Å—å —Å–µ—Ä–µ–¥ —ñ–Ω—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ ‚Äî –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ Telegram-–∫–∞–Ω–∞–ª–∏ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ö–∞–Ω–∞–ª 1", url=PARTNER1)],
                [InlineKeyboardButton("–ö–∞–Ω–∞–ª 2", url=PARTNER2)],
                [InlineKeyboardButton("–ö–∞–Ω–∞–ª 3", url=PARTNER3)],
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data='skip_partners')],
            ])
        )
    return STEP7

async def partner_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–î—è–∫—É—î–º–æ! –í–∞—à–µ —Ä–µ–∑—é–º–µ –≤–∂–µ —É –Ω–∞—Å. –ü—Ä–æ—Ç—è–≥–æ–º 3-—Ö –¥–Ω—ñ–≤ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –Ω–∞—à —Ä–µ–∫—Ä—É—Ç–µ—Ä.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main():
    threading.Thread(target=run_flask, daemon=True).start()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            STEP1: [CallbackQueryHandler(vacancy_selected)],
            STEP2: [MessageHandler(filters.TEXT & ~filters.COMMAND, vacancy_input)],
            STEP3: [MessageHandler(filters.TEXT & ~filters.COMMAND, gender_selected)],
            STEP4: [CallbackQueryHandler(region_selected)],
            STEP5: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_input)],
            STEP6: [MessageHandler(filters.TEXT & ~filters.COMMAND, about_input)],
            STEP7: [CallbackQueryHandler(partner_selected)],
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
