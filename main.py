import os
import threading
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
from flask import Flask

BOT_TOKEN = os.getenv("BOT_TOKEN")

flask_app = Flask(__name__)
@flask_app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

def run_flask():
    flask_app.run(host="0.0.0.0", port=8080)

# –í–°–¢–ê–í –°–í–û–á –ü–û–°–ò–õ–ê–ù–ù–Ø
LINK_KURYER = "https://t.me/YOUR_CHANNEL1"
LINK_PRODAVEC = "https://t.me/YOUR_CHANNEL2"
LINK_GRUZCHIK = "https://t.me/YOUR_CHANNEL3"
LINK_KASSIR = "https://t.me/YOUR_CHANNEL4"
LINK_OTHER = "https://t.me/YOUR_CHANNEL_OTHER"
LINK_PODTV = "https://t.me/YOUR_CHANNEL5"
LINK_MUZH = "https://t.me/YOUR_CHANNEL6"
LINK_JENA = "https://t.me/YOUR_CHANNEL7"
PARTNER1 = "https://t.me/YOUR_PARTNER1"
PARTNER2 = "https://t.me/YOUR_PARTNER2"
PARTNER3 = "https://t.me/YOUR_PARTNER3"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —à–∞–≥–æ–≤ –∞–Ω–∫–µ—Ç—ã
(
    STEP_VACANCY, STEP_OTHER, STEP_CONFIRM, STEP_VACANCY_TEXT, STEP_GENDER,
    STEP_REGION, STEP_AGE, STEP_ABOUT, STEP_PARTNER
) = range(9)

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_user.id
    user_data[chat_id] = {}

    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ ‚Äú–ì–∞—Ä—è—á–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ—è—Ö –£–∫—Ä–∞—ó–Ω–∞‚Äù!\n"
        "–ú–∏ –ø—Ä–∞—Ü—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–º–∏ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—è–º–∏ —Ç–∞ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞–º–∏ ‚Äî —Ç–æ–º—É –Ω–∞—à—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –∑–∞–≤–∂–¥–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –π –Ω–∞–¥—ñ–π–Ω—ñ.\n"
        "–ù–∞ –∑–∞—Ä–∞–∑ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏ –Ω–∞ —Ç–∞–∫—ñ –ø–æ–∑–∏—Ü—ñ—ó —É 25 –º—ñ—Å—Ç–∞—Ö –£–∫—Ä–∞—ó–Ω–∏:"
    )
    await context.bot.send_message(chat_id, "–¢–µ—Ä–º—ñ–Ω–æ–≤–æ —à—É–∫–∞—î–º–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤:")

    # –í–∞–∫–∞–Ω—Å—ñ—è 1: –ö—É—Ä'—î—Ä
    await context.bot.send_message(
        chat_id,
        "üî• –ö—É—Ä'—î—Ä ‚Äî 40‚ÄØ000 –≥—Ä–Ω\n"
        "–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø—ñ—à–∫–∏, –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ñ –∞–±–æ –∞–≤—Ç–æ.\n"
        "‚úÖ –î–æ—Å–≤—ñ–¥ –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π\n"
        "‚úÖ –í–∏–¥–∞—î–º–æ —Å–∞–º–æ–∫–∞—Ç\n"
        "‚úÖ –í—ñ–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û–±—Ä–∞—Ç–∏", callback_data="v_kuryer")]])
    )
    # –í–∞–∫–∞–Ω—Å—ñ—è 2: –ü—Ä–æ–¥–∞–≤–µ—Ü—å
    await context.bot.send_message(
        chat_id,
        "üî• –ü—Ä–æ–¥–∞–≤–µ—Ü—å ‚Äî 45‚ÄØ000 –≥—Ä–Ω\n"
        "–†–æ–±–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ: –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ–∫—É–ø—Ü—è–º, –≤–∏–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä—É.\n"
        "‚úÖ –û–ø–ª–∞—á—É–≤–∞–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞\n"
        "‚úÖ –í–∏–¥–∞—î–º–æ —Å–∞–º–æ–∫–∞—Ç\n"
        "‚úÖ –í—ñ–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û–±—Ä–∞—Ç–∏", callback_data="v_prodavets")]])
    )
    # –í–∞–∫–∞–Ω—Å—ñ—è 3: –í–∞–Ω—Ç–∞–∂–Ω–∏–∫
    await context.bot.send_message(
        chat_id,
        "üî• –í–∞–Ω—Ç–∞–∂–Ω–∏–∫ ‚Äî 43‚ÄØ000 –≥—Ä–Ω\n"
        "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –π —Ä–æ–∑–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ/—É –º–∞–≥–∞–∑–∏–Ω—ñ.\n"
        "‚úÖ –§—ñ–∑–∏—á–Ω–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å\n"
        "‚úÖ –î–æ—Å–≤—ñ–¥ –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π\n"
        "‚úÖ –ü—É–Ω–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û–±—Ä–∞—Ç–∏", callback_data="v_gruzchik")]])
    )
    # –í–∞–∫–∞–Ω—Å—ñ—è 4: –ö–∞—Å–∏—Ä
    await context.bot.send_message(
        chat_id,
        "üî• –ö–∞—Å–∏—Ä ‚Äî 42‚ÄØ000 –≥—Ä–Ω\n"
        "–†–æ–±–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ: –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ–∫—É–ø—Ü—è–º, –≤–∏–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä—É.\n"
        "‚úÖ –û–ø–ª–∞—á—É–≤–∞–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞\n"
        "‚úÖ –í–∏–¥–∞—î–º–æ —Å–∞–º–æ–∫–∞—Ç\n"
        "‚úÖ –í—ñ–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û–±—Ä–∞—Ç–∏", callback_data="v_kassir")]])
    )

    # –ü–æ—Å–ª–µ –≤–∞–∫–∞–Ω—Å–∏–π ‚Äî –∫–Ω–æ–ø–∫–∞ "–î–∏–≤–∏—Ç–∏—Å—å —â–µ 26 –≤–∞–∫–∞–Ω—Å—ñ–π"
    await context.bot.send_message(
        chat_id,
        "–ê–±–æ –∑–∞–ª–∏—à –∑–∞—è–≤–∫—É –Ω–∞ —ñ–Ω—à—É –≤–∞–∫–∞–Ω—Å—ñ—é",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∏–≤–∏—Ç–∏—Å—å —â–µ 26 –≤–∞–∫–∞–Ω—Å—ñ–π", callback_data="other")]
        ])
    )

    return STEP_VACANCY

async def handle_vacancy_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    chat_id = query.from_user.id

    vacancy_map = {
        "v_kuryer": LINK_KURYER,
        "v_prodavets": LINK_PRODAVEC,
        "v_gruzchik": LINK_GRUZCHIK,
        "v_kassir": LINK_KASSIR,
        "other": LINK_OTHER
    }
    chosen = query.data
    user_data[chat_id]["chosen_vacancy"] = chosen

    # 8: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + —Ñ–æ—Ç–æ (2.jpeg)
    with open("2.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —â–æ –≤–∏ –Ω–µ –±–æ—Ç, —â–æ–± –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –≥–∞—Ä—è—á–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏!", url=LINK_PODTV, callback_data="confirm")]
            ])
        )
    # –î–∞–ª–µ–µ ‚Äî –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    return STEP_CONFIRM

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # 9: —Ç–µ–∫—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è
    chat_id = update.effective_user.id
    await context.bot.send_message(
        chat_id,
        "–ù–∞–ø–∏—à—ñ—Ç—å, —è–∫–∞ –≤–∞–∫–∞–Ω—Å—ñ—è –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å!",
        reply_markup=ReplyKeyboardRemove()
    )
    return STEP_VACANCY_TEXT

async def handle_vacancy_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_user.id
    user_data[chat_id]["vacancy_text"] = update.message.text

    # 10: –í–∏–±—ñ—Ä —Å—Ç–∞—Ç—ñ + —Ñ–æ—Ç–æ (3.jpeg)
    with open("3.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ–∫", url=LINK_MUZH, callback_data="male")],
                [InlineKeyboardButton("–ñ—ñ–Ω–∫–∞", url=LINK_JENA, callback_data="female")]
            ])
        )
    return STEP_GENDER

async def handle_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_user.id
    # 11: –í–∏–±—ñ—Ä —Ä–µ–≥—ñ–æ–Ω—É + —Ñ–æ—Ç–æ (4.jpeg)
    with open("4.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–ó —è–∫–æ–≥–æ –≤–∏ —Ä–µ–≥—ñ–æ–Ω—É?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üá∫üá¶ –°—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", callback_data='region_east')],
                [InlineKeyboardButton("üá∫üá¶ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", callback_data='region_central')],
                [InlineKeyboardButton("üá∫üá¶ –ó–∞—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", callback_data='region_west')],
                [InlineKeyboardButton("üá∫üá¶ –ü—ñ–≤–¥–µ–Ω–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", callback_data='region_south')],
                [InlineKeyboardButton("üá∫üá¶ –ü—ñ–≤–Ω—ñ—á–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞", callback_data='region_north')],
            ])
        )
    return STEP_REGION

async def handle_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    chat_id = query.from_user.id
    region_map = {
        'region_east': "–°—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞",
        'region_central': "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞",
        'region_west': "–ó–∞—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞",
        'region_south': "–ü—ñ–≤–¥–µ–Ω–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞",
        'region_north': "–ü—ñ–≤–Ω—ñ—á–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞",
    }
    region = region_map.get(query.data, "–Ü–Ω—à–∏–π")
    user_data[chat_id]['region'] = region

    # 12: –í—ñ–∫ + —Ñ–æ—Ç–æ (1.jpeg)
    with open("1.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?"
        )
    return STEP_AGE

async def handle_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_user.id
    user_data[chat_id]['age'] = update.message.text
    # 13: –ü—Ä–æ —Å–µ–±–µ
    await update.message.reply_text("–†–æ–∑–∫–∞–∂—ñ—Ç—å —Ç—Ä–æ—Ö–∏ –ø—Ä–æ —Å–µ–±–µ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î —Ä–µ–∑—é–º–µ!")
    return STEP_ABOUT

async def handle_about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_user.id
    user_data[chat_id]['about'] = update.message.text

    # 14: –ü–∞—Ä—Ç–Ω–µ—Ä–∏ + —Ñ–æ—Ç–æ (5.jpeg)
    with open("5.jpeg", "rb") as img:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=img,
            caption="–©–æ–± –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —à–∞–Ω—Å–∏ –∑–Ω–∞–π—Ç–∏ —Ä–æ–±–æ—Ç—É —Ç–∞ –≤–∏–¥—ñ–ª–∏—Ç–∏—Å—å —Å–µ—Ä–µ–¥ —ñ–Ω—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ ‚Äî –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ Telegram-–∫–∞–Ω–∞–ª–∏ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ö–∞–Ω–∞–ª 1", url=PARTNER1, callback_data="p1")],
                [InlineKeyboardButton("–ö–∞–Ω–∞–ª 2", url=PARTNER2, callback_data="p2")],
                [InlineKeyboardButton("–ö–∞–Ω–∞–ª 3", url=PARTNER3, callback_data="p3")],
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data='skip_partners')],
            ])
        )
    return STEP_PARTNER

async def handle_partner(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–î—è–∫—É—î–º–æ! –í–∞—à–µ —Ä–µ–∑—é–º–µ –≤–∂–µ —É –Ω–∞—Å. –ü—Ä–æ—Ç—è–≥–æ–º 3-—Ö –¥–Ω—ñ–≤ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –Ω–∞—à —Ä–µ–∫—Ä—É—Ç–µ—Ä.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main():
    threading.Thread(target=run_flask, daemon=True).start()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            STEP_VACANCY: [CallbackQueryHandler(handle_vacancy_choice)],
            STEP_CONFIRM: [CallbackQueryHandler(handle_confirm, pattern="confirm")],
            STEP_VACANCY_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vacancy_text)],
            STEP_GENDER: [CallbackQueryHandler(handle_gender, pattern="male|female")],
            STEP_REGION: [CallbackQueryHandler(handle_region, pattern="region_.*")],
            STEP_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_age)],
            STEP_ABOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_about)],
            STEP_PARTNER: [CallbackQueryHandler(handle_partner, pattern="p1|p2|p3|skip_partners")],
        },
        fallbacks=[CommandHandler('start', start)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
